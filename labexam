#Create a simulator objectset
set ns [new Simulator]
$ns color 1 Gold
$ns color 2 Magenta
$ns color 3 Orange
$ns color 4 LightBlue
#Open the NAM trace file
set nf [open l8.nam w]
$ns namtrace-all $nf
#Open the .tr trace file
set nt [open l8.tr w]
$ns trace-all $nt
set f1 [open l80.tr w]
set f2 [open l81.tr w]
set f3 [open l82.tr w]
set f4 [open l83.tr w]
#Define procedure record
proc record {} {
global tcp1 tcp2 tcp3 tcp4 f1 f2 f3 f4
#Get an instance of the simulator
set ns [Simulator instance]
#Set the time after which the procedure should 
be called again
set time 0.01
#How many bytes have been received by the 
traffic sinks?
set s1 [$tcp1 set cwnd_]
set s2 [$tcp2 set cwnd_]
set s3 [$tcp3 set cwnd_]
set s4 [$tcp4 set cwnd_] 
#Get the current time
set now [$ns now]
#Calculate the bandwidth (in MBit/s) and write 
it to the files
puts $f1 "$now [expr $s1]"
puts $f2 "$now [expr $s2]"
puts $f3 "$now [expr $s3]"
puts $f4 "$now [expr $s4]"
#Reset the bytes_ values on the traffic sinks
$tcp1 set bytes_ 0
$tcp2 set bytes_ 0
$tcp3 set bytes_ 0
$tcp4 set bytes_ 0
#Re-schedule the procedure
$ns at [expr $now+$time] "record"
}
#Define a 'finish' procedure
proc finish {} {
global ns nf nt
$ns flush-trace
#Close the NAM trace file
close $nf
#Close the .tr trace file
close $nt
#Execute NAM on the trace file$cbr3 set rate 1Mb
exec nam out.nam &
exec xgraph out0.tr out1.tr out2.tr out3.tr &
exit 0
}
#Create two nodes
set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
set n3 [$ns node]
set n4 [$ns node]
set n5 [$ns node]
set n6 [$ns node]
set n7 [$ns node]
set n8 [$ns node]
set n9 [$ns node]
#Create a link between the two nodes
$ns duplex-link $n2 $n0 1Mb 10ms DropTail
$ns duplex-link-op $n2 $n0 orient left-up
$ns duplex-link $n2 $n6 1Mb 10ms DropTail
$ns duplex-link-op $n2 $n6 orient left
$ns duplex-link $n2 $n1 1Mb 10ms DropTail
$ns duplex-link-op $n2 $n1 orient left-down
$ns duplex-link $n2 $n3 3Mb 10ms DropTail
$ns duplex-link-op $n2 $n3 orient right
$ns duplex-link $n3 $n5 2Mb 10ms DropTail
$ns duplex-link-op $n3 $n5 orient right-up
$ns duplex-link $n3 $n7 2Mb 10ms DropTail
$ns duplex-link-op $n3 $n7 orient right
$ns duplex-link $n3 $n4 2Mb 10ms DropTail
$ns duplex-link-op $n3 $n4 orient right-down
$ns duplex-link $n2 $n8 1Mb 10ms DropTail
$ns duplex-link-op $n2 $n8 orient down
$ns duplex-link $n3 $n9 3Mb 10ms DropTail
$ns duplex-link-op $n3 $n9 orient down
#Setup a TCP connection
set tcp1 [new Agent/TCP/Vegas]
$ns attach-agent $n0 $tcp1
set sink1 [new Agent/TCPSink]
$ns attach-agent $n5 $sink1
$ns connect $tcp1 $sink1
$tcp1 set fid_ 1
#Setup a FTP over TCP connection
set ftp1 [new Application/FTP]
$ftp1 attach-agent $tcp1
$ftp1 set type_ FTP
#Setup a TCP connection
set tcp2 [new Agent/TCP/Reno]
$ns attach-agent $n6 $tcp2
set sink2 [new Agent/TCPSink]
$ns attach-agent $n7 $sink2
$ns connect $tcp2 $sink2
$tcp2 set fid_ 2
#Setup a FTP over TCP connection
set ftp2 [new Application/FTP]
$ftp2 attach-agent $tcp2
$ftp2 set type_ FTP
#Setup a TCP connection
set tcp3 [new Agent/TCP/Newreno]
$ns attach-agent $n1 $tcp3
set sink3 [new Agent/TCPSink]
$ns attach-agent $n4 $sink3
$ns connect $tcp3 $sink3
$tcp3 set fid_ 3
#Setup a FTP over TCP connection
set ftp3 [new Application/FTP]
$ftp3 attach-agent $tcp3
$ftp3 set type_ FTP
#Setup a TCP connection
set tcp4 [new Agent/TCP/Vegas]
$ns attach-agent $n8 $tcp4
set sink4 [new Agent/TCPSink]
$ns attach-agent $n9 $sink4
$ns connect $tcp4 $sink4
$tcp4 set fid_ 4
#Setup a FTP over TCP connection
set ftp4 [new Application/FTP]
$ftp4 attach-agent $tcp4
$ftp4 set type_ FTP
$ns at 0.1 "record"
$ns at 0.5 "$ftp1 start"
$ns at 1.4 "$ftp2 start"
$ns at 1.9 "$ftp3 start"
$ns at 2.1 "$ftp4 start"
$ns at 4.0 "$ftp1 stop"
$ns at 4.1 "$ftp2 stop"
$ns at 4.4 "$ftp3 stop"
$ns at 3.5 "$ftp4 stop"
$ns at 5 finish
$ns run
