 Create a Simulator
set ns [new Simulator]
#Define different colors for data flows (for NAM)
$ns color 1 Yellow
$ns color 2 Blue $ns color 3 Pink
$ns color 4 Violet
#Create .tr trace file
set nt [open out7.tr w]
$ns trace
-all $nt
#Create .tr trace files for each flow
set f0 [open out07.tr w]
set f1 [open out17.tr w]
set f2 [open out27.tr w]
set f3 [open out37.tr w]
#Create a NAM trace file
set myNAM [open out.nam w]
$ns namtrace
-all $myNAM
#Define procedure finish
proc finish {} {
global ns myNAM nt f0 f1 f2 f3
$ns flush
-trace
close $myNAM
close $nt
close $f0
close $f1
close $f2
close $f3
exec nam out.nam &
exec ./xgraph out07.tr out17.tr out27.tr out37.tr &
exit 0 }
#Define procedure record
proc record {} {
global tcp0 tcp1 tcp2 tcp3 f0 f1 f2 f3
#Get an instance of the simulator
set ns [Simulator instance]
53
#Set the time after which the procedure should be called again
set time 0.01
#How many bytes have been received by the traffic sinks?
set s3 [$tcp0 set cwnd_]
set s0 [$tcp1 set cwnd_]
set s1 [$tcp2 set cwnd_]
set s2 [$tcp3 set cwnd_]
#Get the current time
set now [$ns now]
#Calculate the bandwidth (in MBit/s) and write it to the files
puts $f0 "$now $s0"
puts $f1 "$now $s1"
puts $f2 "$now $s2"
puts $f3 "$now $s3"
#Reset the bytes_ values on the traffic sinks
$tcp0 set bytes_ 0
$tcp1 set bytes_ 0
$tcp2 set bytes_ 0
$tcp3 set bytes_ 0
$ns at [expr $now+$time] "record"
}
# Create Nodes
set n0 [$ns node]
set n1 [$ns node]
set n2 [$ns node]
set n3 [$ns node]
set n4 [$ns node]
set n5 [$ns node]
set n6 [$ns node]
set n7 [$ns node]
set n8 [$ns node]
set n9 [$ns node]
# Connect Nodes with Links
$ns duplex-link $n0 $n2 1Mb 10ms DropTail
$ns duplex-link $n6 $n2 1Mb 10ms DropTail
$ns duplex-link $n1 $n2 1Mb 10ms DropTail
$ns duplex-link $n8 $n2 1Mb 10ms DropTail
$ns duplex-link $n3 $n5 2Mb 10ms DropTail
$ns duplex-link $n3 $n7 2Mb 10ms DropTail
$ns duplex-link $n3 $n4 2Mb 10ms DropTail
54
$ns duplex
-link $n3 $n9 2Mb 10ms DropTail
$ns duplex
-link $n3 $n2 3Mb 10ms DropTail
#Give node position (for NAM)
$ns duplex
-link
-op $n0 $n2 orient right
-down
$ns duplex
-link
-op $n6 $n2 orient right
$ns duplex
-link
-op $n1 $n2 orient right
-up
$ns duplex
-link
-op $n8 $n2 orient up
$ns duplex
-link
-op $n3 $n5 orient right
-up
$ns duplex
-link
-op $n3 $n7 orient right
$ns duplex
-link
-op $n3 $n4 orient right
-down
$ns duplex
-link
-op $n3 $n9 orient down
$ns duplex
-link
-op $n2 $n3 orient right
#Setup a TCP connection
set tcp0 [new Agent/TCP/Vegas]
$ns attach
-agent $n0 $tcp0
set sink0 [new Agent/TCPSink]
$ns attach
-agent $n5 $sink0
$ns connect $tcp0 $sink0
$tcp0 set fid_ 1
#Setup a FTP over TCP connection
set ftp0 [new Application/FTP]
$ftp0 attach
-agent $tcp0
$ftp0 set type_ FTP
#Setup a TCP connection
set tcp1 [new Agent/TCP/Reno]
$ns attach
-agent $n6 $tcp1
set sink1 [new Agent/TCPSink]
$ns attach
-agent $n7 $sink1
$ns connect $tcp1 $sink1 $tcp1 set fid_ 2
#Setup a FTP over TCP connection
set ftp1 [new Application/FTP]
$ftp1 attach
-agent $tcp1
$ftp1 set type_ FTP
#Setup a TCP connection
set tcp2 [new Agent/TCP/Newreno]
$ns attach
-agent $n1 $tcp2
set sink2 [new Agent/TCPSink]
$ns attach
-agent $n4 $sink2
$ns connect $tcp2 $sink2
55
$tcp2 set fid_ 3
#Setup a FTP over TCP connection
set ftp2 [new Application/FTP]
$ftp2 attach
-agent $tcp2
$ftp2 set type_ FTP
#Setup a TCP connection
set tcp3 [new Agent/TCP/Vegas]
$ns attach
-agent $n8 $tcp
3
set sink3 [new Agent/TCPSink]
$ns attach
-agent $n9 $sink3
$ns connect $tcp3 $sink3
$tcp3 set fid_ 4
#Setup a FTP over TCP connection
set ftp3 [new Application/FTP]
$ftp3 attach
-agent $tcp3
$ftp3 set type_ FTP
$ns at 0.1 "record"
$ns at 0.5 
"$ftp0 start"
$ns at 1.4 
"$ftp2 start"
$ns at 1.9 
"$ftp3 start"
$ns at 2.1 
"$ftp1 start"
$ns at 4.0 
"$ftp1 stop"
$ns at 4.1 
"$ftp0 stop"
$ns at 4.4 
"$ftp3 stop"
$ns at 3.5 
"$ftp2 stop"
$ns at 5 finish
